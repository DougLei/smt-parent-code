package com.smt.jbpm.query;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.ModelAndViewContainer;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.douglei.bpm.query.SqlQueryExecutor;
import com.douglei.bpm.query.impl.CountQueryExecutor;
import com.douglei.bpm.query.impl.LimitQueryExecutor;
import com.douglei.bpm.query.impl.PageQueryExecutor;
import com.douglei.bpm.query.impl.PageRecursiveQueryExecutor;
import com.douglei.bpm.query.impl.QueryExecutor;
import com.douglei.bpm.query.impl.RecursiveQueryExecutor;
import com.douglei.bpm.query.impl.UniqueQueryExecutor;
import com.douglei.orm.sessionfactory.sessions.session.sqlquery.impl.AbstractParameter;
import com.douglei.orm.sessionfactory.sessions.session.sqlquery.impl.LogicalOperator;
import com.douglei.orm.sessionfactory.sessions.session.sqlquery.impl.Operator;
import com.douglei.orm.sessionfactory.sessions.session.sqlquery.impl.Parameter;
import com.douglei.orm.sessionfactory.sessions.session.sqlquery.impl.ParameterGroup;
import com.douglei.orm.sessionfactory.sessions.session.sqlquery.impl.QueryMode;
import com.douglei.orm.sessionfactory.sessions.sqlsession.PageRecursiveEntity;
import com.douglei.orm.sessionfactory.sessions.sqlsession.RecursiveEntity;
import com.douglei.tools.StringUtil;
import com.ibs.components.filters.log.core.filter.HttpServletRequest4Log;

/**
 * 目前前端不支持传递复杂参数, 所以该类暂不使用
 * @author DougLei
 */
public class QueryCriteriaResolver_BAK implements HandlerMethodArgumentResolver {

	@Override
	public boolean supportsParameter(MethodParameter parameter) {
		  return parameter.getParameterType() == QueryCriteriaEntity.class && parameter.hasParameterAnnotation(QueryCriteria.class);
	}

	@Override
	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
	    JSONObject json = JSONObject.parseObject(((HttpServletRequest4Log)webRequest.getNativeRequest(HttpServletRequest.class)).getRequestBody2String());
		
	    switch(QueryMode.valueOf(json.getString("mode").toUpperCase())) {
	    	case QUERY:
	    		return build(new QueryExecutor(), json);
	    	case UNIQUE_QUERY:
	    		return build(new UniqueQueryExecutor(), json);
	    	case LIMIT_QUERY:
	    		return build(new LimitQueryExecutor(json.getIntValue("startRow"), json.getIntValue("length")), json);
	    	case COUNT_QUERY:
	    		return build(new CountQueryExecutor(), json);
	    	case PAGE_QUERY:
	    		return build(new PageQueryExecutor(json.getIntValue("pageNum"), json.getIntValue("pageSize")), json);
	    	case RECURSIVE_QUERY:
	    		RecursiveEntity rentity = new RecursiveEntity();
	    		setPropertyValues(json, rentity);
	    		return build(new RecursiveQueryExecutor(rentity), json);
	    	case PAGE_RECURSIVE_QUERY:
	    		PageRecursiveEntity prentity = new PageRecursiveEntity(json.getIntValue("pageNum"), json.getIntValue("pageSize"));
	    		setPropertyValues(json, prentity);
	    		return build(new PageRecursiveQueryExecutor(prentity), json);
	    }
	    throw new QueryCriteriaException("BUG");
	}
	
	// 设置entity的属性值
	private void setPropertyValues(JSONObject json, RecursiveEntity entity) {
		Integer deep = json.getInteger("deep");
		if(deep != null)
			entity.setDeep(deep);
		
		String column = json.getString("column");
		if(StringUtil.unEmpty(column))
			entity.setColumn(column);
		
		String parentColumn = json.getString("parentColumn");
		if(StringUtil.unEmpty(parentColumn))
			entity.setParentColumn(parentColumn);
		
		String children = json.getString("children");
		if(StringUtil.unEmpty(children))
			entity.setChildren(children);
		
		JSONArray array = json.getJSONArray("values");
		if(array==null || array.isEmpty())
			return;
		entity.setValue(array.toArray());
	}
	
	// 构建QueryCriteriaEntity实例
	private QueryCriteriaEntity build(SqlQueryExecutor executor, JSONObject json) {
		JSONArray array = json.getJSONArray("parameters");
		if(array == null || array.isEmpty()) 
			return new QueryCriteriaEntity(executor, null);
		
		List<AbstractParameter> parameters = new ArrayList<AbstractParameter>(array.size());
		for(int i=0; i<array.size(); i++) {
			JSONObject obj = array.getJSONObject(i);
			switch(obj.getIntValue("type")) {
				case 0:
					parameters.add(getParameter(obj));
					break;
				case 1:
					AbstractParameter parameterGroup = getParameterGroup(obj);
					if(parameterGroup != null)
						parameters.add(parameterGroup);
					break;
				default:
					throw new QueryCriteriaException("参数的类型值["+obj.getIntValue("type")+"]错误");
			}
		}
		return new QueryCriteriaEntity(executor, parameters);
	}

	// 设置参数的next属性
	private AbstractParameter setNext(JSONObject json, AbstractParameter parameter) {
		if(LogicalOperator.OR.name().equalsIgnoreCase(json.getString("next")))
			parameter.setNext(LogicalOperator.OR);
		return parameter;
	}
	
	// 获取Parameter实例
	private AbstractParameter getParameter(JSONObject json) {
		JSONArray array = json.getJSONArray("values");
		if(array==null || array.isEmpty())
			return setNext(json, new Parameter("true".equalsIgnoreCase(json.getString("negate")), Operator.valueOf(json.getString("operator").toUpperCase()), json.getString("name")));
		
		return setNext(json, new Parameter("true".equalsIgnoreCase(json.getString("negate")), Operator.valueOf(json.getString("operator").toUpperCase()), json.getString("name"), array.toArray()));
	}
	
	// 获取ParameterGroup实例
	private AbstractParameter getParameterGroup(JSONObject json) {
		JSONArray array = json.getJSONArray("group");
		if(array == null || array.isEmpty())
			return null;
		
		ParameterGroup group = new ParameterGroup();
		for(int i=0; i<array.size(); i++) {
			JSONObject obj = array.getJSONObject(i);
			switch(obj.getIntValue("type")) {
				case 0:
					group.addParameter(getParameter(obj));
					break;
				case 1:
					AbstractParameter parameterGroup = getParameterGroup(obj);
					if(parameterGroup != null)
						group.addParameter(parameterGroup);
					break;
				default:
					throw new QueryCriteriaException("参数的类型值["+obj.getIntValue("type")+"]错误");
			}
		}
		return setNext(json, group);
	}
}
